{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { AngularFirestore } from \"@angular/fire/firestore\";\nimport { WishlistService } from \"./wishlist.service\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./wishlist.service\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(firestore, wishlistService) {\n      this.firestore = firestore;\n      this.wishlistService = wishlistService;\n      this.cartProducts = new BehaviorSubject([]); // Initialized with an empty array\n      this.cartProducts$ = this.cartProducts.asObservable();\n      this.cartCount = new BehaviorSubject(0);\n      this.cartCount$ = this.cartCount.asObservable();\n      this.getCartItems().subscribe(cartData => {\n        this.cartProducts.next(cartData.items);\n        this.cartCount.next(this.getCartCount()); // Initialize cartCount from fetched items\n      });\n    }\n    addToCart(count, product) {\n      console.log('Product:', product);\n      // Ensure cartProducts is always an array\n      const cartProducts = this.cartProducts.value;\n      // Check if product already exists in the cart\n      const index = cartProducts.findIndex(p => p.id === product.id);\n      // If product exists, update the quantity, otherwise add the product to the cart\n      if (index !== -1) {\n        cartProducts[index].quantity += count; // Update the quantity\n      } else {\n        cartProducts.push({\n          ...product,\n          quantity: count\n        }); // Add new product with quantity\n      }\n      // Log the updated cart products array\n      console.log('Updated Cart Products:', cartProducts);\n      // Update the BehaviorSubject with the new cart data\n      this.cartProducts.next(cartProducts);\n      this.cartCount.next(this.getCartCount()); // Update the cart count (total number of items in cart)\n      // Now update Firestore with the latest cart data\n      this.updateCartInDb(cartProducts);\n      // Optionally, remove product from wishlist\n      this.wishlistService.removeFromWishlist(product.id);\n    }\n    updateCartInDb(cartProducts) {\n      // Set the updated cartItems in Firestore document\n      this.firestore.collection(\"cartItems\").doc(\"cart\").set({\n        items: cartProducts // Ensure the `items` field is updated as an array\n      }, {\n        merge: true\n      } // Merge ensures we don't overwrite other fields in the document\n      ).then(() => {\n        console.log(\"Cart updated in Firestore successfully.\");\n      }).catch(error => {\n        console.error(\"Error updating cart in Firestore:\", error);\n      });\n    }\n    getCartItems() {\n      return this.firestore.collection(\"cartItems\").doc(\"cart\").valueChanges().pipe(map(cartData => {\n        console.log('Fetched cart data:', cartData); // Log fetched data\n        // Check if items exist and are an array, otherwise return an empty array\n        if (!cartData || !Array.isArray(cartData.items)) {\n          console.warn('Cart items are missing or not an array, returning empty array.');\n          return {\n            items: []\n          }; // Return empty array if no items\n        }\n        return cartData;\n      }));\n    }\n    getCartCount() {\n      const cartProducts = this.cartProducts.value;\n      // Use reduce to sum up the quantity of items\n      return cartProducts.reduce((total, item) => total + (item.quantity || 0), 0);\n    }\n    decreaseQuantity(product) {\n      const cartProducts = this.cartProducts.value;\n      const index = cartProducts.findIndex(p => p.id === product.id); // Use 'product' here too\n      if (index !== -1) {\n        if (cartProducts[index].quantity > 1) {\n          cartProducts[index].quantity--;\n          this.cartCount.next(this.cartCount.value - 1);\n        } else {\n          cartProducts.splice(index, 1);\n          this.cartCount.next(this.cartCount.value - 1);\n        }\n        this.cartProducts.next(cartProducts);\n        this.updateCartInDb(cartProducts); // Update Firestore\n      }\n    }\n    increaseQuantity(product) {\n      const cartProducts = this.cartProducts.value;\n      const index = cartProducts.findIndex(p => p.id === product.id);\n      if (index !== -1) {\n        cartProducts[index].quantity++;\n        this.cartProducts.next(cartProducts);\n        this.cartCount.next(this.cartCount.value + 1);\n        this.updateCartInDb(cartProducts);\n      }\n    }\n    getTotalPrice() {\n      const currentProducts = this.cartProducts.value;\n      // Sum up the total price for each product (price * quantity)\n      return currentProducts.reduce((total, product) => {\n        return total + product.price * (product.quantity || 1);\n      }, 0);\n    }\n    static {\n      this.ɵfac = function CartService_Factory(__ngFactoryType__) {\n        i0.ɵɵinvalidFactory();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CartService,\n        factory: CartService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}