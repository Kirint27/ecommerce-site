{"ast":null,"code":"var _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { StripeService } from 'ngx-stripe';\nimport { CartService } from \"../services/cart.service\";\nlet CheckoutComponent = class CheckoutComponent {\n  constructor(formBuilder, cartService, stripeService, router) {\n    this.formBuilder = formBuilder;\n    this.cartService = cartService;\n    this.stripeService = stripeService;\n    this.router = router;\n    this.showPaymentForm = false;\n    this.totalPrice = 0;\n    this.deliveryFormSubmitted = false;\n    this.httpRequestIsPending = false;\n    this.showCheckoutErrorMessage = false;\n    this.cardDetails = {}; // To hold card details from ngx-stripe-card\n    this.cardOptions = {\n      hidePostalCode: true,\n      style: {\n        base: {\n          // Customize the styles of the card inputs\n          fontSize: '16px',\n          color: '#000'\n        },\n        invalid: {\n          color: '#fa755a',\n          iconColor: '#fa755a'\n        }\n      }\n    };\n  }\n  ngOnInit() {\n    this.buildForm();\n    this.totalPrice = this.cartService.getTotalPrice();\n    console.log('Total Price:', this.totalPrice);\n  }\n  buildForm() {\n    this.deliveryForm = this.formBuilder.group({\n      fullName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', Validators.required],\n      address: ['', Validators.required],\n      postcode: ['', Validators.required]\n    });\n    this.stripeForm = this.formBuilder.group({\n      cardDetails: ['', Validators.required]\n    });\n  }\n  onDeliverySubmit() {\n    // Check if the delivery form is valid\n    if (this.deliveryForm.valid) {\n      // Show the payment form if the form is valid\n      this.showPaymentForm = true;\n    } else {\n      // Optionally, you can handle invalid fields without marking them as touched\n      console.log('Please fill in all required fields.');\n    }\n  }\n  onPaymentSubmit(event) {\n    console.log('Payment form submit triggered'); // Log to check if function is triggered\n    event.preventDefault();\n    if (!this.cardDetails || !this.cardDetails.card) {\n      this.showCheckoutErrorMessage = true;\n      this.deliveryErrorMessage = \"Please enter valid card details\";\n      return;\n    }\n    const paymentMethodData = {\n      type: 'card',\n      card: this.cardDetails.card,\n      billing_details: {\n        name: this.deliveryForm.get('fullName').value,\n        email: this.deliveryForm.get('email').value,\n        phone: this.deliveryForm.get('phone').value,\n        address: {\n          line1: this.deliveryForm.get('address').value,\n          postal_code: this.deliveryForm.get('postcode').value\n        }\n      }\n    };\n    this.stripeService.createPaymentMethod(paymentMethodData).subscribe({\n      next: result => {\n        if (result.error) {\n          console.error('Error creating payment method:', result.error.message);\n          this.showCheckoutErrorMessage = true;\n          this.deliveryErrorMessage = result.error.message;\n        } else {\n          console.log('Payment Method created successfully:', result);\n          this.showCheckoutErrorMessage = false;\n          // Get total price\n          const totalPrice = this.cartService.getTotalPrice();\n          console.log('Total Price:', totalPrice); // This should log the total price\n          console.log('Payment form submitted successfully!');\n        }\n      },\n      error: error => {\n        console.error('Error creating payment method:', error);\n        this.showCheckoutErrorMessage = true;\n        this.deliveryErrorMessage = error.message;\n      }\n    });\n  }\n  goBack() {\n    this.router.navigate([\"/cart\"]);\n  }\n};\nCheckoutComponent = __decorate([Component({\n  selector: \"app-checkout\",\n  templateUrl: \"./checkout.component.html\",\n  styleUrls: [\"./checkout.component.scss\"]\n}), __metadata(\"design:paramtypes\", [FormBuilder, CartService, typeof (_a = typeof StripeService !== \"undefined\" && StripeService) === \"function\" ? _a : Object, Router])], CheckoutComponent);\nexport { CheckoutComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}